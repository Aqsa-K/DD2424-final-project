# -*- coding: utf-8 -*-
"""Copy of ResNet-18 (Fine Tuning) On cifar-10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16lHYvu8sujitsY8hE1WtaKe_LOKLDqvx
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

from __future__ import print_function
from __future__ import division
import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import time
import os
import copy
print("PyTorch Version: ",torch.__version__)
print("Torchvision Version: ",torchvision.__version__)

# Top level data directory. Here we assume the format of the directory conforms
#   to the ImageFolder structure
data_dir = "./data/hymenoptera_data"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model_name = "resnet"

# Number of classes in the dataset
num_classes = 10

# Batch size for training (change depending on how much memory you have)
batch_size = 8

# Number of epochs to train for
num_epochs = 8

# Flag for feature extracting. When False, we finetune the whole model,
#   when True we only update the reshaped layer params
feature_extract = True

def set_parameter_requires_grad(model, feature_extracting):
    if feature_extracting:
        for param in model.parameters():
            param.requires_grad = False

def train_model(model, dataloaders, criterion, optimizer, num_epochs=25,):
    since = time.time()

    val_acc_history = []

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch, num_epochs - 1))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['train', 'val']:
            if phase == 'train':
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
#                 labels= labels.sub(labels,1)
                inputs = inputs.to(device)
                labels = labels.to(device)

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):

                    print(phase)

                    outputs = model(inputs)
                    loss = criterion(outputs, labels)

                    _, preds = torch.max(outputs, 1)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)

            epoch_loss = running_loss / len(dataloaders[phase].dataset)
            epoch_acc = running_corrects.double() / len(dataloaders[phase].dataset)

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())
            if phase == 'val':
                val_acc_history.append(epoch_acc)

        print()

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model, val_acc_history

def initialize_model( num_classes, feature_extract, use_pretrained=True):
    # Initialize these variables which will be set in this if statement. Each of these
    #   variables is model specific.
    model_ft = None
    input_size = 0
    model_ft = models.resnet18(pretrained=use_pretrained)
    set_parameter_requires_grad(model_ft, feature_extract)
    num_ftrs = model_ft.fc.in_features
    model_ft.fc = nn.Linear(num_ftrs, num_classes)
    input_size = 224


    return model_ft, input_size

# Initialize the model for this run
model_ft, input_size = initialize_model( num_classes, feature_extract, use_pretrained=True)

# Print the model we just instantiated
print(model_ft)

mean, std = [0.4914, 0.4822, 0.4465], [0.247, 0.243, 0.261]
# These values are mostly used by researchers as found to very useful in fast convergence
img_size=224
crop_size = 224

transform = transforms.Compose(
    [
     transforms.Resize(img_size),#, interpolation=torchvision.transforms.InterpolationMode.BICUBIC),
     #transforms.CenterCrop(crop_size),
     transforms.RandomRotation(20),
     transforms.RandomHorizontalFlip(0.1),
     transforms.ColorJitter(brightness=0.1,contrast = 0.1 ,saturation =0.1 ),
     transforms.RandomAdjustSharpness(sharpness_factor = 2, p = 0.1),
     transforms.ToTensor(),
     transforms.Normalize(mean,std),
     transforms.RandomErasing(p=0.75,scale=(0.02, 0.1),value=1.0, inplace=False)])

transformTest = transforms.Compose(
[
    transforms.Resize((img_size,img_size)),
    transforms.ToTensor(),
    transforms.Normalize(mean, std)])

batch_size = 8
test_batch = 8

# trainset = torchvision.datasets.CIFAR10(root='./data', train=True,
#                                         download=True, transform=transform)
# trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,
#                                           shuffle=True, num_workers=2)



# Download the full CIFAR10 dataset
full_dataset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                             download=True, transform=transform)

# Define the size of the subset (e.g., 10% of the original dataset)
subset_size = int(0.001 * len(full_dataset))

# Create a random subset of the full dataset
subset_indices = torch.randperm(len(full_dataset))[:subset_size]
subset_dataset = torch.utils.data.Subset(full_dataset, subset_indices)

# Create data loaders
trainloader = torch.utils.data.DataLoader(subset_dataset, batch_size=batch_size,
                                          shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(root='./data', train=False,
                                       download=True, transform=transformTest)
# Define the size of the subset (e.g., 10% of the original dataset)
subset_size_test = int(0.001 * len(testset))

# Create a random subset of the full dataset
subset_indices = torch.randperm(len(testset))[:subset_size_test]
subset_testset = torch.utils.data.Subset(testset, subset_indices)
testloader = torch.utils.data.DataLoader(subset_testset, batch_size=test_batch,
                                         shuffle=False, num_workers=2)

# image_datasets = {'train':trainset,'val':testset}

dataloaders_dict = {'train':trainloader,'val':testloader}

# classes = ('plane', 'car', 'bird', 'cat',
#            'deer', 'dog', 'frog', 'horse', 'ship', 'truck')
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Send the model to GPU
model_ft = model_ft.to(device)

params_to_update = model_ft.parameters()
print("Params to learn:")
if feature_extract:
    params_to_update = []
    for name,param in model_ft.named_parameters():
        if param.requires_grad == True:
            params_to_update.append(param)
            print("\t",name)

else:
    for name,param in model_ft.named_parameters():
        if param.requires_grad == True:
            print("\t",name)

# Observe that all parameters are being optimized
optimizer_ft = optim.SGD(params_to_update, lr=0.001, momentum=0.9)

def get_model(layers_to_tune):
    # Load a pretrained model
    model = models.resnet18(pretrained=True)

    # Freeze all layers in the network
    for param in model.parameters():
        param.requires_grad = False

    # Layer groups in ResNet18
    layer_names = ['layer1', 'layer2', 'layer3', 'layer4']
    for layer_index in layers_to_tune:
        for param in getattr(model, layer_names[layer_index - 1]).parameters():
            param.requires_grad = True

    # Replace the final fully connected layer (unfrozen)
    num_ftrs = model.fc.in_features
    model.fc = nn.Linear(num_ftrs, 10)  # CIFAR10 has 10 classes

    return model

def get_params_to_update(model):
  params_to_update = [param for param in model.parameters() if param.requires_grad]

  return params_to_update

def run_layer_fine_tuning_experiments():
    experiments = [
        {"layers_to_tune": [4]},
        {"layers_to_tune": [3, 4]},
        {"layers_to_tune": [2, 3, 4]},
        {"layers_to_tune": [1, 2, 3, 4]},
    ]
    i=1
    for experiment in experiments:
        model = get_model(experiment["layers_to_tune"])
        params_to_update = get_params_to_update(model)
        optimizer_ft = torch.optim.SGD(params_to_update, lr=0.001, momentum=0.9)
        criterion = nn.CrossEntropyLoss()

        # Train and evaluate
        print("Experiment {} with layer number {} tuned".format(i, str(experiment["layers_to_tune"])))
        model_ft = train_model(model, dataloaders_dict, criterion, optimizer_ft, num_epochs=num_epochs)
        print(f'Experiment with layers {experiment["layers_to_tune"]} completed.')
        i+=1

run_layer_fine_tuning_experiments()

import time
preds = []
inf = 0.0
m = 0.0

with torch.no_grad():
    start1 = time.time()
    for data in testloader:
        images, labels = data
        images = images.to(device)
        labels = labels.to(device)
        # calculate outputs by running images through the network
        start = time.time()
        outputs = model_ft(images)
        end = time.time()
        inf = start- end
        if inf > m:
            m = inf
        # the class with the highest energy is what we choose as prediction
        _, predicted = torch.max(outputs.data, 1)
        preds.append(predicted)
    end1 = time.time()
    inf1 = (end-start)/10000

infloader = torch.utils.data.DataLoader(testset,batch_size=1,shuffle=False,num_workers = 2)
image,label = next(iter(infloader))
start = time.time()
outputs = model_ft(image.to(device))
end = time.time()
inf_time = end-start